use rand::Rng;
use sha2::{Digest, Sha256};

/// Generates an ID for the URL using the URL as a hash for the ID.
///
/// # Examples
///
/// ```rust,ignore
/// let id = generate_id("https://example.com");
/// ```
pub(crate) fn generate_id(url: &str) -> String {
    const NUM_CHARS: usize = 10;

    let mut url_hasher = Sha256::new();
    url_hasher.update(url.as_bytes());
    let mut url_hash = hex::encode(url_hasher.finalize());

    let mut rng_gen = rand::rng();

    let short_id_start_idx: usize =
        rng_gen.random_range(0..(url_hash.len() - NUM_CHARS));
    let short_id_end_idx = short_id_start_idx + NUM_CHARS;

    // Make random alphabets in the short ID range uppercase.
    unsafe {
        for ch in url_hash.as_bytes_mut() {
            if rng_gen.random_bool(0.30) && ch.is_ascii_alphabetic() {
                ch.make_ascii_uppercase();
            }
        }
    }

    url_hash[short_id_start_idx..short_id_end_idx].to_string()
}

#[cfg(test)]
mod tests {
    /// The IDs generated by 2 consecutive calls to the
    /// [`generate_id`](super::generate_id) function must not be the same.
    #[test]
    fn id_not_same() {
        const URL: &str = "https://example.com";

        let first_id = super::generate_id(URL);
        let second_id = super::generate_id(URL);

        assert_ne!(first_id, second_id);
    }
}
